---
import Button from "@/components/ui/Button.astro";
import { Search } from "@lucide/astro";

export interface Props {
  placeholder?: string;
  buttonText?: string;
  class?: string;
  showDescription?: boolean;
}

const {
  placeholder = "0x1234567890abcdef...",
  buttonText = "Analyze Security",
  class: className = "",
  showDescription = true,
} = Astro.props;
---

<div class={`address-search-form ${className}`}>
  <form id="address-form" class="space-y-6">
    <div class="space-y-2">
      <label
        for="ethereum-address"
        class="font-large-body font-semibold text-[var(--color-text-title-primary)] block"
      >
        Ethereum Address
      </label>
      <div class="relative">
        <input
          type="text"
          id="ethereum-address"
          name="address"
          placeholder={placeholder}
          class="w-full px-4 py-3 pr-12 rounded-lg border border-[var(--color-button-outline)] bg-transparent text-[var(--color-text-title-primary)] placeholder-[var(--color-text-content-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-quantus-blue)] focus:border-transparent"
          required
          pattern="^0x[a-fA-F0-9]{40}$"
          title="Please enter a valid Ethereum address (0x followed by 40 hexadecimal characters)"
        />
        <Search class="absolute right-3 top-1/2 transform -translate-y-1/2 text-[var(--color-text-content-secondary)] w-5 h-5" />
      </div>
      {showDescription && (
        <p class="font-body text-sm text-[var(--color-text-content-secondary)]">
          Enter a valid Ethereum address starting with 0x
        </p>
      )}
    </div>

    <Button
      type="submit"
      variant="primary"
      size="large"
      class="w-full"
      id="analyze-button"
    >
      <div class="flex items-center gap-2">
        <span>{buttonText}</span>
      </div>
    </Button>
  </form>

  <div id="error-message" class="mt-4 hidden">
    <div class="p-4 rounded-lg bg-red-100 border border-red-300">
      <p class="font-body text-red-700" id="error-text"></p>
    </div>
  </div>

  <div id="loading-message" class="mt-4 hidden">
    <div class="p-4 rounded-lg bg-blue-100 border border-blue-300">
      <p class="font-body text-blue-700 flex items-center gap-2">
        <span class="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full"></span>
        Analyzing address...
      </p>
    </div>
  </div>
</div>

<script>
  function initializeAddressForm() {
    const form = document.getElementById('address-form') as HTMLFormElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const errorText = document.getElementById('error-text') as HTMLElement;
    const loadingMessage = document.getElementById('loading-message') as HTMLElement;
    const analyzeButton = document.getElementById('analyze-button') as HTMLButtonElement;

    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const address = (formData.get('address') as string)?.trim();

      // Hide previous messages
      errorMessage?.classList.add('hidden');
      loadingMessage?.classList.remove('hidden');
      if (analyzeButton) analyzeButton.disabled = true;

      try {
        // Validate Ethereum address format
        if (!address) {
          throw new Error('Please enter an Ethereum address');
        }

        if (!address.startsWith('0x')) {
          throw new Error('Ethereum address must start with "0x"');
        }

        if (address.length !== 42) {
          throw new Error('Ethereum address must be exactly 42 characters long (0x + 40 hex characters)');
        }

        const ethAddressRegex = /^0x[a-fA-F0-9]{40}$/;
        if (!ethAddressRegex.test(address)) {
          throw new Error('Ethereum address contains invalid characters. Only 0-9 and a-f are allowed after "0x"');
        }

        // Navigate to the security report page
        window.location.href = `/security-report/${address}`;

      } catch (error) {
        // Show error message
        loadingMessage?.classList.add('hidden');
        if (errorText) {
          errorText.textContent = error instanceof Error ? error.message : 'An error occurred while processing your request';
        }
        errorMessage?.classList.remove('hidden');
        if (analyzeButton) analyzeButton.disabled = false;
      }
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAddressForm);
  } else {
    initializeAddressForm();
  }
</script>
