---
import { GET } from "@/pages/api/reports/[address]";
import Layout from "@/components/layout/Layout.astro";
import env from "@/config";
import defaultMetadata from "@/constants/default-metadata";
import type { SEOProps } from "astro-seo";
import type { EthereumAddressData } from "@/interfaces/EthereumSecurity";
import {
  generateSecurityAnalysis,
  getGradeColorClass,
  getOgImageFileName,
} from "@/utils/quantum-security-scorer";
import GeneralCard from "@/components/ui/GeneralCard.astro";
import RiskFactorCard from "@/components/ui/RiskFactorCard.astro";
import { formatExposureDuration } from "@/utils/quantum-security-scorer";
import SphereDecoration from "@/components/ui/SphereDecoration.astro";
import { ArrowRight, Hourglass } from "@lucide/astro";
import ShareButton from "@/components/ui/ShareButton.astro";
import Button from "@/components/ui/Button.astro";
import AddressSearchForm from "@/components/ui/AddressSearchForm.astro";

let hasError = false;
let errorMessage = "";
let data: EthereumAddressData | null = null;
let securityAnalysis: any = null;
let securityScore: any = null;
let addressData: any = null;
let analysisDetails: any = null;
let address: string = "";

try {
  const response = await GET(Astro);

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || "Failed to analyze address");
  }

  data = await response.json<EthereumAddressData>();
  securityAnalysis = generateSecurityAnalysis(data);
  ({ securityScore, addressData, analysisDetails, address } = securityAnalysis);
} catch (error) {
  hasError = true;
  if (error instanceof Error) {
    errorMessage = error.message;
  } else {
    errorMessage = "An unexpected error occurred while analyzing the address.";
  }
  address = Astro.params.address || "Unknown Address";
}

// --- SVG GAUGE CALCULATIONS ---
let radius = 90;
let circumference = 2 * Math.PI * radius;
let offset = 0;
let ogTitle = "Quantum Security Analysis";
let ogDesc = "Is your wallet safe from future quantum attacks? Analyse any Ethereum address to get the score, grade, risk level and steps to improve security.";
let ogCanonical = `${env.SITE_BASE_URL}/security-report/${address}`;
let ogImage = {
  url: `${env.SITE_BASE_URL}/grades/Qday_score_F.png`,
  secureUrl: `${env.SITE_BASE_URL}/grades/Qday_score_F.png`,
  alt: "Quantum Security Analysis",
  width: 2400,
  height: 972,
  type: "image/png",
};

if (!hasError && securityScore) {
  offset = circumference - (securityScore.score / 100) * circumference;
  ogTitle = `Quantum Security Score: ${securityScore.score}, Grade ${securityScore.grade}`;
  const ogImagePath = getOgImageFileName(securityScore.grade);
  ogImage = {
    url: `${env.SITE_BASE_URL}/grades/${ogImagePath}`,
    secureUrl: `${env.SITE_BASE_URL}/grades/${ogImagePath}`,
    alt: ogTitle,
    width: 2400,
    height: 972,
    type: "image/png",
  };
}

const metadata: SEOProps = {
  ...defaultMetadata,
  title: `Quantus Report Card`,
  canonical: ogCanonical,
  openGraph: {
    ...defaultMetadata.openGraph,
    basic: {
      ...defaultMetadata.openGraph!.basic,
      url: ogCanonical,
      image: ogImage.url,
      title: ogTitle,
    },
    image: ogImage,
    optional: {
      ...defaultMetadata.openGraph!.optional,
      description: ogDesc,
    },
  },
  twitter: {
    ...defaultMetadata.twitter,
    site: ogCanonical,
    image: ogImage.url,
    imageAlt: ogTitle,
    title: ogTitle,
    description: ogDesc,
  },
};
---

<Layout {...metadata}>
  <div id="report-card" class="relative overflow-hidden">
    <div class="absolute -z-10 flex size-full flex-col items-center">
      <SphereDecoration
        class="absolute top-[21rem] -left-[5rem] md:top-[20rem] md:right-[8rem] md:left-auto"
        variant="17"
        size={241}
      />
      <SphereDecoration
        class="absolute -right-[6rem] bottom-[54rem] md:top-[42rem] md:right-auto"
        variant="18"
        size={371}
      />
    </div>

    <div class="flex flex-col items-center">
      <span
        class="font-giant-mobile lg:font-giant text-gradient-giant min-large-mobile:text-[54px] absolute top-4 -z-10 text-[44px] min-[642px]:top-8 min-[642px]:text-[92px] lg:top-2"
        >VULNERABILITY</span
      >
    </div>

    <div
      class="max-w-content mx-auto space-y-16 px-4 py-20 md:space-y-24 lg:pt-36 lg:pb-20 2xl:px-0"
    >
      <header class="text-center">
        <h1
          class="font-medium-title-mobile md:font-medium-title lg:font-large-title text-[var(--color-text-title-primary)]"
        >
          {hasError ? "Analysis Error" : "Quantum Security Report"}
        </h1>

        {hasError ? (
          <div class="mt-8 max-w-2xl mx-auto">
            <div class="p-6 rounded-lg bg-bg-primary border border-red-200">
              <h2 class="font-large-body font-semibold text-red-800 mb-3 text-center">
                Unable to Analyze Address
              </h2>
              <p class="font-body text-red-700 mb-4 text-center">
                {errorMessage}
              </p>
              <p class="font-body text-red-600 text-sm text-center mb-4">
                <strong>Requested Address:</strong> {address}
              </p>

              <div class="mt-6">
                <h3 class="font-large-body font-semibold text-[var(--color-text-title-primary)] text-center mb-4">
                  Try Another Address
                </h3>
                <AddressSearchForm
                  placeholder="Enter a valid Ethereum address..."
                  buttonText="Analyze"
                  showDescription={true}
                />
              </div>
            </div>
          </div>
        ) : (
          <>
            <p class="font-body mt-4 break-words">
              <span class="font-large-body font-semibold">Analysis for wallet:</span>
              <br />
              <strong class="font-tag hidden md:inline">{address}</strong>
              <strong
                class="min-[340px]:font-tag mx-auto block w-[235px] min-[340px]:w-[315px] md:hidden"
                >{address}</strong
              >
            </p>

            <div
              class="mt-5 flex flex-col items-center justify-center gap-5 sm:flex-row"
            >
              <ShareButton
                url={`${env.SITE_BASE_URL}/security-report/${address}`}
                title="Quantum Security Report"
                description={`Security analysis for wallet ${address}`}
                className="order-1 sm:order-2"
              />
            </div>

            <div class="mt-8 max-w-md mx-auto">
              <h3 class="font-large-body font-semibold text-[var(--color-text-title-primary)] text-center mb-4">
                Check Another Address
              </h3>
              <AddressSearchForm
                placeholder="Enter another address..."
                buttonText="Analyze"
                showDescription={false}
              />
            </div>
          </>
        )}
      </header>

      {!hasError && (
        <section
          class="grid grid-cols-1 items-center gap-12 lg:grid-cols-2 lg:gap-16"
        >
        <div
          class="relative mx-auto flex h-64 w-64 items-center justify-center md:h-80 md:w-80"
        >
          <svg class="absolute inset-0" viewBox="0 0 200 200">
            <circle
              cx="100"
              cy="100"
              r={radius}
              stroke-width="12"
              class="stroke-current text-[var(--color-app-benefit-card)]"
              fill="none"></circle>
            <circle
              cx="100"
              cy="100"
              r={radius}
              stroke-width="12"
              fill="none"
              stroke="url(#scoreGradient)"
              stroke-linecap="round"
              transform="rotate(-90 100 100)"
              style={`stroke-dasharray: ${circumference}; stroke-dashoffset: ${offset};`}
              class="transition-all duration-1000 ease-out"></circle>
            <defs>
              <linearGradient
                id="scoreGradient"
                x1="0%"
                y1="0%"
                x2="0%"
                y2="100%"
              >
                <stop offset="0%" stop-color="var(--color-quantus-blue)"></stop>
                <stop offset="100%" stop-color="var(--color-quantus-pink)"
                ></stop>
              </linearGradient>
            </defs>
          </svg>
          <div class="text-center">
            <span
              class={`font-large-title ${getGradeColorClass(securityScore.grade)}`}
            >
              {securityScore.grade}
            </span>
            <span
              class="font-tag-mobile md:font-tag block text-[var(--color-text-content-secondary)]"
            >
              Score: {securityScore.score}
            </span>
          </div>
        </div>

        <div class="space-y-6 lg:max-w-[398px]">
          <GeneralCard title="Risk Level" content={securityScore.riskLevel} />
          <GeneralCard
            title="Key Exposure"
            content={addressData.isSmartContract ? "N/A" : analysisDetails.publicKeyExposed ? "EXPOSED" : "SECURE"}
          />
        <GeneralCard
            title="Address Type"
            content={addressData.isSmartContract ? "SMART CONTRACT" : "EXTERNAL"}
        />
          <GeneralCard
            title="Balance"
            content={`${addressData.balanceEth.toFixed(4)} ETH`}
          />
        </div>
      </section>

      <section>
        <h2 class="font-medium-title-mobile md:font-medium-title mb-8 md:mb-12">
          Risk Factors
        </h2>
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2 md:gap-8">
        { addressData.isSmartContract ? (
          <RiskFactorCard
            title="Smart Contract Status"
            content={`Smart contracts addresses are not derived from keys, so they cannot be directly compromised in the same way that external accounts can. However, smart contracts often hold large amounts of funds on behalf of their users,
                and these funds are typically secured by elliptic curve keys and are therefore vulnerable to a quantum attacker. More detailed analysis coming soon!`}
          />
        ) : (
          <>
            <RiskFactorCard
              title="Public Key Status"
              content={analysisDetails.publicKeyExposed
                ? `Your public key has been exposed for the ${formatExposureDuration(
                    analysisDetails.daysSinceExposure ?? 0,
                  )} since you sent your first transaction. This makes your wallet a potential target for quantum attacks.`
                : "Your public key has not been exposed through outgoing transactions. This is a very strong security posture against quantum threats. To maintain this, consider using this address for receiving funds only."}
            />
            <RiskFactorCard
              title="Balance & Exposure"
              content={addressData.balanceEth === 0
                ? "This address is empty so no funds are at risk. Even if quantum computers become available, there would be nothing to steal from this wallet."
                : analysisDetails.publicKeyExposed
                  ? `A high balance can make your wallet a more attractive target. Combined with a public key that has been exposed for ${formatExposureDuration(analysisDetails.daysSinceExposure ?? 0)}, the overall risk increases significantly.`
                  : "A high balance can make your wallet a more attractive target. However, since your public key has not been exposed through transactions, your quantum security risk remains relatively low."
              }
            />
          </>
        ) }
        </div>
      </section>
      )}
    </div>

    {!hasError && (
      <section class="bg-advice">
      <div
        class="max-w-content mx-auto space-y-16 px-4 py-20 md:space-y-24 2xl:px-0"
      >
        <h2 class="font-medium-title-mobile md:font-medium-title mb-8 md:mb-12">
          {securityScore.recommendations.length > 1 ? "Advices" : "Advice"}
        </h2>
        <ul class="space-y-4">
          {
            securityScore.recommendations.map((rec) => (
              <li class="flex max-w-[640px] items-start">
                <Hourglass class="text-quantus-yellow mt-1 mr-4 flex shrink-0" />

                <span class="font-body md:font-large-body text-[var(--color-text-content-secondary)]">
                  {rec}
                </span>
              </li>
            ))
          }
        </ul>
      </div>
    </section>
  )}
</div>
</Layout>

<script>
  function reportHeight() {
    const targetList = [
      "https://www.quantus.com",
      "https://www.quantumcanary.org",
    ];
    const height = document.body?.scrollHeight;

    targetList.forEach((target) => {
      window.parent.postMessage(
        { type: "iframe-height", height },
        target, // parent origin
      );
    });
  }

  // Only run if inside iframe
  if (window.self !== window.top) {
    window.addEventListener("load", reportHeight);
    window.addEventListener("resize", reportHeight);

    new MutationObserver(reportHeight).observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
    });
  }
</script>
